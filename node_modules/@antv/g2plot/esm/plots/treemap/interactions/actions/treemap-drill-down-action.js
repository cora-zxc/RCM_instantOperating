import { __assign, __extends } from "tslib";
import { Action, Util } from '@antv/g2';
import { get, isArray } from '@antv/util';
import { deepAssign } from '../../../../utils/deep-assign';
import { transformData } from '../../utils';
// 面包屑文字和分割符'/'之间的距离
var PADDING = 4;
// 面包屑位置距离树图的距离
var PADDING_LEFT = 0;
var PADDING_TOP = 5;
// 面包屑默认配置
var DEFAULT_BREAD_CRUMB_CONFIG = {
    name: 'treemap-bread-crumb',
    rootText: '初始',
    dividerText: '/',
    textStyle: {
        fontSize: 12,
        fill: 'rgba(0, 0, 0, 0.65)',
        cursor: 'pointer',
    },
    activeStyle: {
        fill: '#87B5FF',
    },
};
var TreemapDrillDownAction = /** @class */ (function (_super) {
    __extends(TreemapDrillDownAction, _super);
    function TreemapDrillDownAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // 存储历史下钻数据
        _this.historyCache = null;
        // 面包屑 group
        _this.breadCrumbGroup = null;
        // 面包屑基础配置
        _this.breadCrumbCfg = DEFAULT_BREAD_CRUMB_CONFIG;
        return _this;
    }
    /**
     * 获取 mix 默认的配置和用户配置
     */
    TreemapDrillDownAction.prototype.getButtonCfg = function () {
        return deepAssign(this.breadCrumbCfg, this.cfg);
    };
    /**
     * 下钻数据并更新 view 显示层
     * @param data 下钻数据
     */
    TreemapDrillDownAction.prototype.drill = function (data) {
        var config = this.getButtonCfg();
        var view = this.context.view;
        var currentData = view.getData();
        var groupScales = view.getGroupScales();
        var hierarchyConfig = get(view, ['interactions', 'treemap-drill-down', 'cfg', 'hierarchyConfig'], {});
        // 初始化cache 数据
        if (!this.historyCache) {
            this.historyCache = [
                {
                    // 当前会默认打平第一层，因此无法获取第一层的 name，暂用初始代替
                    name: config.rootText,
                    children: currentData,
                },
            ];
        }
        // 重新 update 数据
        var drillData = transformData({
            data: data,
            colorField: get(groupScales, [0, 'field']),
            enableDrillDown: true,
            hierarchyConfig: hierarchyConfig,
        });
        view.changeData(drillData);
        // 增加历史记录
        this.historyCache.push({
            name: data.name,
            children: drillData,
        });
    };
    /**
     * 显示面包屑
     */
    TreemapDrillDownAction.prototype.drawBreadCrumb = function () {
        this.drawBreadCrumbGroup();
        this.resetPosition();
        this.breadCrumbGroup.show();
    };
    /**
     * 绘制 Button 和 文本
     */
    TreemapDrillDownAction.prototype.drawBreadCrumbGroup = function () {
        var _this = this;
        var config = this.getButtonCfg();
        var historyCache = this.historyCache;
        // 初始化面包屑 group
        if (!this.breadCrumbGroup) {
            this.breadCrumbGroup = this.context.view.foregroundGroup.addGroup({
                name: config.name,
            });
        }
        else {
            this.breadCrumbGroup.clear();
        }
        // 绘制面包屑
        var left = 0;
        historyCache.forEach(function (record, index) {
            // 添加文本
            var textShape = _this.breadCrumbGroup.addShape({
                type: 'text',
                name: config.name + "_" + record.name + "_text",
                attrs: __assign(__assign({ text: record.name }, config.textStyle), { x: left, y: 0 }),
            });
            var textShapeBox = textShape.getBBox();
            left += textShapeBox.width + PADDING;
            // 增加文本事件
            textShape.on('click', function () {
                var newHistoryCache = historyCache.slice(0, index + 1);
                _this.back(newHistoryCache);
            });
            // active 效果内置
            textShape.on('mouseenter', function () {
                textShape.attr(config.activeStyle);
            });
            textShape.on('mouseleave', function () {
                textShape.attr(config.textStyle);
            });
            if (index < historyCache.length - 1) {
                // 添加反斜杠
                var dividerShape = _this.breadCrumbGroup.addShape({
                    type: 'text',
                    name: config.name + "_" + record.name + "_divider",
                    attrs: __assign(__assign({ text: config.dividerText }, config.textStyle), { x: left, y: 0 }),
                });
                var dividerBox = dividerShape.getBBox();
                left += dividerBox.width + PADDING;
            }
        });
    };
    /**
     * 重置位置，初始化及触发 chart  afterchangesize 回调时使用
     */
    TreemapDrillDownAction.prototype.resetPosition = function () {
        // 当在第一层级未绘制面包屑，此时 changedata 触发 resetPosition 函数，需判断 this.breadCrumbGroup 是否存在
        if (!this.breadCrumbGroup)
            return;
        var view = this.context.view;
        var coord = view.getCoordinate();
        var point = coord.convert({ x: 0, y: 1 });
        var breadCrumbGroup = this.breadCrumbGroup;
        var bbox = breadCrumbGroup.getBBox();
        var matrix = Util.transform(null, [['t', point.x + PADDING_LEFT, point.y + bbox.height + PADDING_TOP]]);
        breadCrumbGroup.setMatrix(matrix);
    };
    /**
     * 隐藏面包屑
     */
    TreemapDrillDownAction.prototype.hideCrumbGroup = function () {
        if (this.breadCrumbGroup) {
            this.breadCrumbGroup.hide();
        }
    };
    /**
     * 点击事件, 下钻数据，并绘制面包屑
     */
    TreemapDrillDownAction.prototype.click = function () {
        var data = get(this.context, ['event', 'data', 'data']);
        if (!data)
            return false;
        this.drill(data);
        this.drawBreadCrumb();
    };
    /**
     * 回退事件，点击面包屑时触发
     * @param historyCache 当前要回退到的历史
     */
    TreemapDrillDownAction.prototype.back = function (historyCache) {
        var view = this.context.view;
        if (!isArray(this.historyCache) || this.historyCache.length <= 0) {
            return;
        }
        this.historyCache = historyCache;
        var data = historyCache[historyCache.length - 1].children;
        view.changeData(data);
        if (historyCache.length > 1) {
            this.drawBreadCrumb();
        }
        else {
            this.hideCrumbGroup();
        }
    };
    /**
     * reset: 重置面包屑置初始状态，chart changeData 时使用
     */
    TreemapDrillDownAction.prototype.reset = function () {
        this.historyCache = null;
        this.hideCrumbGroup();
    };
    /**
     * destroy: 销毁资源
     */
    TreemapDrillDownAction.prototype.destroy = function () {
        if (this.breadCrumbGroup) {
            this.breadCrumbGroup.remove();
        }
        _super.prototype.destroy.call(this);
    };
    return TreemapDrillDownAction;
}(Action));
export { TreemapDrillDownAction };
//# sourceMappingURL=treemap-drill-down-action.js.map