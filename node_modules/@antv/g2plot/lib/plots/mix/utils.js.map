{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/plots/mix/utils.ts"],"names":[],"mappings":";;;AACA,qCAAyC;AACzC,2CAAyD;AACzD,0CAAuD;AACvD,6CAA6D;AAC7D,0CAAuD;AACvD,2CAAyD;AACzD,4CAA2D;AAC3D,gDAAkE;AAClE,kDAAsE;AACtE,gDAAiE;AACjE,qDAA0E;AAC1E,gDAAiE;AACjE,gCAA4C;AAC5C,8BAAyC;AACzC,8BAAyC;AACzC,oCAAkD;AAClD,gCAA4C;AAC5C,kCAA+C;AAC/C,0CAAyD;AACzD,0CAAyD;AACzD,8CAA+D;AAC/D,kDAAqE;AACrE,wCAAwD;AA8DxD;;GAEG;AACH,IAAM,aAAa,GAAG;IACpB,IAAI,EAAE,iBAAW;IACjB,GAAG,EAAE,iBAAU;IACf,MAAM,EAAE,iBAAa;IACrB,GAAG,EAAE,iBAAU;IACf,IAAI,EAAE,iBAAW;IACjB,KAAK,EAAE,iBAAY;IACnB,WAAW,EAAE,iBAAe;IAC5B,aAAa,EAAE,iBAAiB;IAChC,WAAW,EAAE,iBAAc;IAC3B,eAAe,EAAE,kBAAmB;IACpC,QAAQ,EAAE,kBAAe;CAC1B,CAAC;AAEF;;;GAGG;AACH,IAAM,gBAAgB,GAAG;IACvB,IAAI,EAAE,WAAI;IACV,GAAG,EAAE,SAAG;IACR,MAAM,EAAE,eAAM;IACd,GAAG,EAAE,SAAG;IACR,IAAI,EAAE,WAAI;IACV,KAAK,EAAE,aAAK;IACZ,WAAW,EAAE,oBAAQ;IACrB,aAAa,EAAE,wBAAU;IACzB,WAAW,EAAE,oBAAQ;IACrB,eAAe,EAAE,4BAAY;IAC7B,QAAQ,EAAE,mBAAQ;CACnB,CAAC;AAEF;;;GAGG;AACH,SAAgB,eAAe,CAC7B,IAAO,EACP,IAAU,EACV,OAA8B;IAE9B,IAAM,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACnC,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,CAAC,KAAK,CAAC,oBAAkB,IAAI,UAAO,CAAC,CAAC;QAC7C,OAAO;KACR;IACD,IAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IACnC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,kBAAU,CAAC,EAAE,EAAE,GAAG,CAAC,iBAAiB,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;AACrF,CAAC;AAZD,0CAYC","sourcesContent":["import { View } from '@antv/g2';\nimport { deepAssign } from '../../utils';\nimport { adaptor as lineAdaptor } from '../line/adaptor';\nimport { adaptor as pieAdaptor } from '../pie/adaptor';\nimport { adaptor as columnAdaptor } from '../column/adaptor';\nimport { adaptor as barAdaptor } from '../bar/adaptor';\nimport { adaptor as areaAdaptor } from '../area/adaptor';\nimport { adaptor as gaugeAdaptor } from '../gauge/adaptor';\nimport { adaptor as tinyLineAdaptor } from '../tiny-line/adaptor';\nimport { adaptor as tinyColumnAdaptor } from '../tiny-column/adaptor';\nimport { adaptor as tinyAreadaptor } from '../tiny-area/adaptor';\nimport { adaptor as ringProgressAdaptor } from '../ring-progress/adaptor';\nimport { adaptor as progressAdaptor } from '../progress/adaptor';\nimport { Line, LineOptions } from '../line';\nimport { Pie, PieOptions } from '../pie';\nimport { Bar, BarOptions } from '../bar';\nimport { Column, ColumnOptions } from '../column';\nimport { Area, AreaOptions } from '../area';\nimport { Gauge, GaugeOptions } from '../gauge';\nimport { TinyLine, TinyLineOptions } from '../tiny-line';\nimport { TinyArea, TinyAreaOptions } from '../tiny-area';\nimport { TinyColumn, TinyColumnOptions } from '../tiny-column';\nimport { RingProgress, RingProgressOptions } from '../ring-progress';\nimport { Progress, ProgressOptions } from '../progress';\n\n/**\n * 移除 options 中的 width、height 设置\n */\ntype OmitSize<T> = Omit<T, 'width' | 'height'>;\n\n/**\n * multi-view 中的支持的 plots 类型（带 options 定义）\n */\nexport type IPlotTypes =\n  | {\n      /**\n       * plot 类型\n       */\n      readonly type: 'line';\n      /**\n       * plot 配置\n       */\n      readonly options: OmitSize<LineOptions>;\n    }\n  | {\n      readonly type: 'pie';\n      readonly options: OmitSize<PieOptions>;\n    }\n  | {\n      readonly type: 'bar';\n      readonly options: OmitSize<BarOptions>;\n    }\n  | {\n      readonly type: 'column';\n      readonly options: OmitSize<ColumnOptions>;\n    }\n  | {\n      readonly type: 'area';\n      readonly options: OmitSize<AreaOptions>;\n    }\n  | {\n      readonly type: 'gauge';\n      readonly options: OmitSize<GaugeOptions>;\n    }\n  | {\n      readonly type: 'tiny-line';\n      readonly options: OmitSize<TinyLineOptions>;\n    }\n  | {\n      readonly type: 'tiny-area';\n      readonly options: OmitSize<TinyAreaOptions>;\n    }\n  | {\n      readonly type: 'tiny-column';\n      readonly options: OmitSize<TinyColumnOptions>;\n    }\n  | {\n      readonly type: 'ring-progress';\n      readonly options: OmitSize<RingProgressOptions>;\n    }\n  | {\n      readonly type: 'progress';\n      readonly options: OmitSize<ProgressOptions>;\n    };\n\n/**\n * 可在 multi-view 中使用的 plots\n */\nconst PLOT_ADAPTORS = {\n  line: lineAdaptor,\n  pie: pieAdaptor,\n  column: columnAdaptor,\n  bar: barAdaptor,\n  area: areaAdaptor,\n  gauge: gaugeAdaptor,\n  'tiny-line': tinyLineAdaptor,\n  'tiny-column': tinyColumnAdaptor,\n  'tiny-area': tinyAreadaptor,\n  'ring-progress': ringProgressAdaptor,\n  progress: progressAdaptor,\n};\n\n/**\n * 获取指定 plot 的 class contructor\n * @param {string} plot\n */\nconst PLOT_CONSTRUCTOR = {\n  line: Line,\n  pie: Pie,\n  column: Column,\n  bar: Bar,\n  area: Area,\n  gauge: Gauge,\n  'tiny-line': TinyLine,\n  'tiny-column': TinyColumn,\n  'tiny-area': TinyArea,\n  'ring-progress': RingProgress,\n  progress: Progress,\n};\n\n/**\n * 执行 plot 的 adaptor, 默认都带上 defaultOptions\n * @param {string} plot\n */\nexport function execPlotAdaptor<T extends IPlotTypes['type']>(\n  plot: T,\n  view: View,\n  options: IPlotTypes['options']\n): void {\n  const cls = PLOT_CONSTRUCTOR[plot];\n  if (!cls) {\n    console.error(`could not find ${plot} plot`);\n    return;\n  }\n  const module = PLOT_ADAPTORS[plot];\n  module({ chart: view, options: deepAssign({}, cls.getDefaultOptions(), options) });\n}\n"]}