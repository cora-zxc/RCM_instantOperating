"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderGraph = exports.getGraphId = exports.getConfig = exports.getContentAndStyle = exports.bindDefaultEvents = exports.getGraphSize = void 0;
var utils_1 = require("../util/utils");
var getGraphSize = function (width, height, container) {
    var CANVAS_WIDTH;
    var CANVAS_HEIGHT;
    if (container && container.current) {
        CANVAS_WIDTH = container.current.offsetWidth;
        CANVAS_HEIGHT = container.current.offsetHeight || 500;
    }
    if ((!width && !CANVAS_WIDTH) || (!height && !CANVAS_HEIGHT)) {
        console.warn('请为 Graph 指定 width 与 height！否则将使用默认值 500 * 500');
        return [500, 500];
    }
    return [width || CANVAS_WIDTH || 500, height || CANVAS_HEIGHT || 500];
};
exports.getGraphSize = getGraphSize;
// 展开&折叠事件
var bindDefaultEvents = function (graph, collapseExpand) {
    if (collapseExpand) {
        var onClick_1 = function (e) {
            var item = e.item;
            if (e.target.get('name') === 'collapse-icon') {
                graph.updateItem(item, {
                    collapsed: !item.getModel().collapsed,
                });
                graph.layout();
            }
        };
        graph.on('node:click', function (e) {
            onClick_1(e);
        });
        graph.on('node:touchstart', function (e) {
            onClick_1(e);
        });
    }
};
exports.bindDefaultEvents = bindDefaultEvents;
// 统一处理 text&style
var getContentAndStyle = function (cfg) {
    if (typeof cfg === 'string' || typeof cfg === 'number') {
        return {
            text: cfg,
        };
    }
    var content = cfg.content, style = cfg.style;
    return {
        text: content,
        style: style,
    };
};
exports.getContentAndStyle = getContentAndStyle;
// 统一处理 config，支持回调
var getConfig = function (cfg, item) {
    if (typeof cfg === 'function') {
        return cfg(item);
    }
    return cfg || {};
};
exports.getConfig = getConfig;
var uuid = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
};
// 同一页面存在多 graph 时需要指定 graphId
var getGraphId = function (graph) {
    if (graph.current) {
        return graph.current;
    }
    graph.current = "IndentedTreeGraph-" + uuid();
    return graph.current;
};
exports.getGraphId = getGraphId;
var renderGraph = function (graph, data) {
    var originData = utils_1.deepClone(data);
    graph.data(originData);
    graph.render();
    graph.fitView();
};
exports.renderGraph = renderGraph;
