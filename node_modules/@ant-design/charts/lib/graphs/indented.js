"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var g6_1 = __importDefault(require("@antv/g6"));
var base_1 = require("../base");
var useGraph_1 = __importDefault(require("../hooks/useGraph"));
var createLoading_1 = __importDefault(require("../util/createLoading"));
var utils_1 = require("./utils");
var utils_2 = require("./utils");
var customItems_1 = require("./customItems");
var contants_1 = require("./contants");
var graphs = {};
customItems_1.registerNodes();
var IndentedTreeGraph = function (props) {
    var data = props.data, className = props.className, style = props.style, width = props.width, height = props.height, _a = props.nodeType, nodeType = _a === void 0 ? 'card' : _a, _b = props.edgeType, edgeType = _b === void 0 ? 'cubic-horizontal' : _b, _c = props.behaviors, behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c, _d = props.nodeAnchorPoints, nodeAnchorPoints = _d === void 0 ? contants_1.defaultNodeAnchorPoints : _d, _e = props.nodeSize, nodeSize = _e === void 0 ? contants_1.defaultNodeSize : _e, layout = props.layout, nodeStyle = props.nodeStyle, edgeStyle = props.edgeStyle, nodeStateStyles = props.nodeStateStyles, edgeStateStyles = props.edgeStateStyles, _f = props.collapseExpand, collapseExpand = _f === void 0 ? true : _f, titleStyle = props.titleStyle, bodyStyle = props.bodyStyle, footerStyle = props.footerStyle, footerValueStyle = props.footerValueStyle, _g = props.showArrow, showArrow = _g === void 0 ? true : _g, onReady = props.onReady, loading = props.loading, loadingTemplate = props.loadingTemplate, errorTemplate = props.errorTemplate;
    var container = react_1.default.useRef(null);
    var graph = react_1.default.useRef(null);
    var graphId = utils_1.getGraphId(graph);
    useGraph_1.default(graphs[graphId], props, container);
    react_1.useEffect(function () {
        var graphSize = utils_1.getGraphSize(width, height, container);
        var graph = graphs[graphId];
        if (!graph) {
            graph = new g6_1.default.TreeGraph({
                container: container.current,
                width: graphSize[0],
                height: graphSize[1],
                modes: {
                    default: behaviors,
                },
                defaultNode: {
                    type: nodeType,
                    size: nodeSize,
                    anchorPoints: nodeAnchorPoints,
                    titleStyle: titleStyle,
                    bodyStyle: bodyStyle,
                    footerStyle: footerStyle,
                    footerValueStyle: footerValueStyle,
                },
                defaultEdge: {
                    type: edgeType,
                },
                nodeStateStyles: __assign(__assign({}, contants_1.defaultStateStyles), nodeStateStyles),
                edgeStateStyles: __assign(__assign({}, contants_1.defaultStateStyles), edgeStateStyles),
                layout: __assign(__assign({}, contants_1.defaultLayout), layout),
            });
            graphs[graphId] = graph;
        }
        graph.node(function (node) {
            if (typeof nodeStyle === 'function') {
                return {
                    style: nodeStyle(node, graph),
                };
            }
            return {
                style: __assign(__assign({}, contants_1.defaultNodeStyle), nodeStyle),
            };
        });
        graph.edge(function (edge) {
            if (typeof edgeStyle === 'function') {
                return {
                    style: edgeStyle(edge, graph),
                };
            }
            return {
                style: __assign(__assign({ stroke: '#ccc' }, (showArrow && contants_1.defaultEdgeArrowStyle)), edgeStyle),
            };
        });
        if (collapseExpand) {
            utils_2.bindDefaultEvents(graph, collapseExpand);
        }
        utils_2.renderGraph(graph, data);
        if (onReady) {
            onReady(graph);
        }
        return function () {
            if (graphs[graphId]) {
                graphs[graphId].destroy();
                delete graphs[graphId];
            }
        };
    }, []);
    return (react_1.default.createElement(base_1.ErrorBoundary, { errorTemplate: errorTemplate },
        loading && react_1.default.createElement(createLoading_1.default, { loadingTemplate: loadingTemplate }),
        react_1.default.createElement("div", { className: className, style: style, ref: container })));
};
exports.default = IndentedTreeGraph;
