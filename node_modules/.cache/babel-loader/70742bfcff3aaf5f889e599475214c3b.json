{"ast":null,"code":"import { isNumber, isArray } from '@antv/util';\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\n\nexport function normalPadding(padding) {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n\n  if (isArray(padding)) {\n    var length_1 = padding.length;\n\n    if (length_1 === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n\n    if (length_1 === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    if (length_1 === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n\n    if (length_1 === 4) {\n      return padding;\n    }\n  }\n\n  return [0, 0, 0, 0];\n}","map":{"version":3,"sources":["../../src/utils/padding.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,EAAmB,OAAnB,QAAkC,YAAlC;AAEA;;;AAGG;;AACH,OAAM,SAAU,aAAV,CAAwB,OAAxB,EAA2D;AAC/D,MAAI,QAAQ,CAAC,OAAD,CAAZ,EAAuB;AACrB,WAAO,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAAP;AACD;;AACD,MAAI,OAAO,CAAC,OAAD,CAAX,EAAsB;AACpB,QAAM,QAAM,GAAG,OAAO,CAAC,MAAvB;;AAEA,QAAI,QAAM,KAAK,CAAf,EAAkB;AAChB,aAAO,CAAC,OAAO,CAAC,CAAD,CAAR,EAAa,OAAO,CAAC,CAAD,CAApB,EAAyB,OAAO,CAAC,CAAD,CAAhC,EAAqC,OAAO,CAAC,CAAD,CAA5C,CAAP;AACD;;AACD,QAAI,QAAM,KAAK,CAAf,EAAkB;AAChB,aAAO,CAAC,OAAO,CAAC,CAAD,CAAR,EAAa,OAAO,CAAC,CAAD,CAApB,EAAyB,OAAO,CAAC,CAAD,CAAhC,EAAqC,OAAO,CAAC,CAAD,CAA5C,CAAP;AACD;;AACD,QAAI,QAAM,KAAK,CAAf,EAAkB;AAChB,aAAO,CAAC,OAAO,CAAC,CAAD,CAAR,EAAa,OAAO,CAAC,CAAD,CAApB,EAAyB,OAAO,CAAC,CAAD,CAAhC,EAAqC,OAAO,CAAC,CAAD,CAA5C,CAAP;AACD;;AACD,QAAI,QAAM,KAAK,CAAf,EAAkB;AAChB,aAAO,OAAP;AACD;AACF;;AAED,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;AACD","sourcesContent":["import { isNumber, isArray } from '@antv/util';\n\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\nexport function normalPadding(padding: number | number[] | 'auto'): [number, number, number, number] {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n  if (isArray(padding)) {\n    const length = padding.length;\n\n    if (length === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n    if (length === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n    if (length === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n    if (length === 4) {\n      return padding as [number, number, number, number];\n    }\n  }\n\n  return [0, 0, 0, 0];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}