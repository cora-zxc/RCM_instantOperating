{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Action, Util } from '@antv/g2';\nimport { get, isArray } from '@antv/util';\nimport { deepAssign } from '../../../../utils/deep-assign';\nimport { transformData } from '../../utils'; // 面包屑文字和分割符'/'之间的距离\n\nvar PADDING = 4; // 面包屑位置距离树图的距离\n\nvar PADDING_LEFT = 0;\nvar PADDING_TOP = 5; // 面包屑默认配置\n\nvar DEFAULT_BREAD_CRUMB_CONFIG = {\n  name: 'treemap-bread-crumb',\n  rootText: '初始',\n  dividerText: '/',\n  textStyle: {\n    fontSize: 12,\n    fill: 'rgba(0, 0, 0, 0.65)',\n    cursor: 'pointer'\n  },\n  activeStyle: {\n    fill: '#87B5FF'\n  }\n};\n\nvar TreemapDrillDownAction =\n/** @class */\nfunction (_super) {\n  __extends(TreemapDrillDownAction, _super);\n\n  function TreemapDrillDownAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // 存储历史下钻数据\n\n\n    _this.historyCache = null; // 面包屑 group\n\n    _this.breadCrumbGroup = null; // 面包屑基础配置\n\n    _this.breadCrumbCfg = DEFAULT_BREAD_CRUMB_CONFIG;\n    return _this;\n  }\n  /**\n   * 获取 mix 默认的配置和用户配置\n   */\n\n\n  TreemapDrillDownAction.prototype.getButtonCfg = function () {\n    return deepAssign(this.breadCrumbCfg, this.cfg);\n  };\n  /**\n   * 下钻数据并更新 view 显示层\n   * @param data 下钻数据\n   */\n\n\n  TreemapDrillDownAction.prototype.drill = function (data) {\n    var config = this.getButtonCfg();\n    var view = this.context.view;\n    var currentData = view.getData();\n    var groupScales = view.getGroupScales();\n    var hierarchyConfig = get(view, ['interactions', 'treemap-drill-down', 'cfg', 'hierarchyConfig'], {}); // 初始化cache 数据\n\n    if (!this.historyCache) {\n      this.historyCache = [{\n        // 当前会默认打平第一层，因此无法获取第一层的 name，暂用初始代替\n        name: config.rootText,\n        children: currentData\n      }];\n    } // 重新 update 数据\n\n\n    var drillData = transformData({\n      data: data,\n      colorField: get(groupScales, [0, 'field']),\n      enableDrillDown: true,\n      hierarchyConfig: hierarchyConfig\n    });\n    view.changeData(drillData); // 增加历史记录\n\n    this.historyCache.push({\n      name: data.name,\n      children: drillData\n    });\n  };\n  /**\n   * 显示面包屑\n   */\n\n\n  TreemapDrillDownAction.prototype.drawBreadCrumb = function () {\n    this.drawBreadCrumbGroup();\n    this.resetPosition();\n    this.breadCrumbGroup.show();\n  };\n  /**\n   * 绘制 Button 和 文本\n   */\n\n\n  TreemapDrillDownAction.prototype.drawBreadCrumbGroup = function () {\n    var _this = this;\n\n    var config = this.getButtonCfg();\n    var historyCache = this.historyCache; // 初始化面包屑 group\n\n    if (!this.breadCrumbGroup) {\n      this.breadCrumbGroup = this.context.view.foregroundGroup.addGroup({\n        name: config.name\n      });\n    } else {\n      this.breadCrumbGroup.clear();\n    } // 绘制面包屑\n\n\n    var left = 0;\n    historyCache.forEach(function (record, index) {\n      // 添加文本\n      var textShape = _this.breadCrumbGroup.addShape({\n        type: 'text',\n        name: config.name + \"_\" + record.name + \"_text\",\n        attrs: __assign(__assign({\n          text: record.name\n        }, config.textStyle), {\n          x: left,\n          y: 0\n        })\n      });\n\n      var textShapeBox = textShape.getBBox();\n      left += textShapeBox.width + PADDING; // 增加文本事件\n\n      textShape.on('click', function () {\n        var newHistoryCache = historyCache.slice(0, index + 1);\n\n        _this.back(newHistoryCache);\n      }); // active 效果内置\n\n      textShape.on('mouseenter', function () {\n        textShape.attr(config.activeStyle);\n      });\n      textShape.on('mouseleave', function () {\n        textShape.attr(config.textStyle);\n      });\n\n      if (index < historyCache.length - 1) {\n        // 添加反斜杠\n        var dividerShape = _this.breadCrumbGroup.addShape({\n          type: 'text',\n          name: config.name + \"_\" + record.name + \"_divider\",\n          attrs: __assign(__assign({\n            text: config.dividerText\n          }, config.textStyle), {\n            x: left,\n            y: 0\n          })\n        });\n\n        var dividerBox = dividerShape.getBBox();\n        left += dividerBox.width + PADDING;\n      }\n    });\n  };\n  /**\n   * 重置位置，初始化及触发 chart  afterchangesize 回调时使用\n   */\n\n\n  TreemapDrillDownAction.prototype.resetPosition = function () {\n    // 当在第一层级未绘制面包屑，此时 changedata 触发 resetPosition 函数，需判断 this.breadCrumbGroup 是否存在\n    if (!this.breadCrumbGroup) return;\n    var view = this.context.view;\n    var coord = view.getCoordinate();\n    var point = coord.convert({\n      x: 0,\n      y: 1\n    });\n    var breadCrumbGroup = this.breadCrumbGroup;\n    var bbox = breadCrumbGroup.getBBox();\n    var matrix = Util.transform(null, [['t', point.x + PADDING_LEFT, point.y + bbox.height + PADDING_TOP]]);\n    breadCrumbGroup.setMatrix(matrix);\n  };\n  /**\n   * 隐藏面包屑\n   */\n\n\n  TreemapDrillDownAction.prototype.hideCrumbGroup = function () {\n    if (this.breadCrumbGroup) {\n      this.breadCrumbGroup.hide();\n    }\n  };\n  /**\n   * 点击事件, 下钻数据，并绘制面包屑\n   */\n\n\n  TreemapDrillDownAction.prototype.click = function () {\n    var data = get(this.context, ['event', 'data', 'data']);\n    if (!data) return false;\n    this.drill(data);\n    this.drawBreadCrumb();\n  };\n  /**\n   * 回退事件，点击面包屑时触发\n   * @param historyCache 当前要回退到的历史\n   */\n\n\n  TreemapDrillDownAction.prototype.back = function (historyCache) {\n    var view = this.context.view;\n\n    if (!isArray(this.historyCache) || this.historyCache.length <= 0) {\n      return;\n    }\n\n    this.historyCache = historyCache;\n    var data = historyCache[historyCache.length - 1].children;\n    view.changeData(data);\n\n    if (historyCache.length > 1) {\n      this.drawBreadCrumb();\n    } else {\n      this.hideCrumbGroup();\n    }\n  };\n  /**\n   * reset: 重置面包屑置初始状态，chart changeData 时使用\n   */\n\n\n  TreemapDrillDownAction.prototype.reset = function () {\n    this.historyCache = null;\n    this.hideCrumbGroup();\n  };\n  /**\n   * destroy: 销毁资源\n   */\n\n\n  TreemapDrillDownAction.prototype.destroy = function () {\n    if (this.breadCrumbGroup) {\n      this.breadCrumbGroup.remove();\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return TreemapDrillDownAction;\n}(Action);\n\nexport { TreemapDrillDownAction };","map":{"version":3,"sources":["../../../../../src/plots/treemap/interactions/actions/treemap-drill-down-action.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action, IGroup, Util } from '@antv/g2';\nimport { get, isArray } from '@antv/util';\nimport { deepAssign } from '../../../../utils/deep-assign';\nimport { transformData } from '../../utils';\n\n// 面包屑文字和分割符'/'之间的距离\nconst PADDING = 4;\n// 面包屑位置距离树图的距离\nconst PADDING_LEFT = 0;\nconst PADDING_TOP = 5;\n// 面包屑默认配置\nconst DEFAULT_BREAD_CRUMB_CONFIG = {\n  name: 'treemap-bread-crumb',\n  rootText: '初始',\n  dividerText: '/',\n  textStyle: {\n    fontSize: 12,\n    fill: 'rgba(0, 0, 0, 0.65)',\n    cursor: 'pointer',\n  },\n  activeStyle: {\n    fill: '#87B5FF',\n  },\n};\nexport class TreemapDrillDownAction extends Action {\n  // 存储历史下钻数据\n  public historyCache: Record<string, any>[] = null;\n  // 面包屑 group\n  private breadCrumbGroup: IGroup = null;\n  // 面包屑基础配置\n  private breadCrumbCfg = DEFAULT_BREAD_CRUMB_CONFIG;\n\n  /**\n   * 获取 mix 默认的配置和用户配置\n   */\n  private getButtonCfg() {\n    return deepAssign(this.breadCrumbCfg, this.cfg);\n  }\n\n  /**\n   * 下钻数据并更新 view 显示层\n   * @param data 下钻数据\n   */\n  private drill(data) {\n    const config = this.getButtonCfg();\n    const { view } = this.context;\n    const currentData = view.getData();\n    const groupScales = view.getGroupScales();\n    const hierarchyConfig = get(view, ['interactions', 'treemap-drill-down', 'cfg', 'hierarchyConfig'], {});\n\n    // 初始化cache 数据\n    if (!this.historyCache) {\n      this.historyCache = [\n        {\n          // 当前会默认打平第一层，因此无法获取第一层的 name，暂用初始代替\n          name: config.rootText,\n          children: currentData,\n        },\n      ];\n    }\n\n    // 重新 update 数据\n    const drillData = transformData({\n      data,\n      colorField: get(groupScales, [0, 'field']),\n      enableDrillDown: true,\n      hierarchyConfig,\n    });\n\n    view.changeData(drillData);\n\n    // 增加历史记录\n    this.historyCache.push({\n      name: data.name,\n      children: drillData,\n    });\n  }\n\n  /**\n   * 显示面包屑\n   */\n  public drawBreadCrumb() {\n    this.drawBreadCrumbGroup();\n    this.resetPosition();\n    this.breadCrumbGroup.show();\n  }\n\n  /**\n   * 绘制 Button 和 文本\n   */\n  private drawBreadCrumbGroup() {\n    const config = this.getButtonCfg();\n    const historyCache = this.historyCache;\n\n    // 初始化面包屑 group\n    if (!this.breadCrumbGroup) {\n      this.breadCrumbGroup = this.context.view.foregroundGroup.addGroup({\n        name: config.name,\n      });\n    } else {\n      this.breadCrumbGroup.clear();\n    }\n\n    // 绘制面包屑\n    let left = 0;\n    historyCache.forEach((record, index) => {\n      // 添加文本\n      const textShape = this.breadCrumbGroup.addShape({\n        type: 'text',\n        name: `${config.name}_${record.name}_text`,\n        attrs: {\n          text: record.name,\n          ...config.textStyle,\n          x: left,\n          y: 0,\n        },\n      });\n\n      const textShapeBox = textShape.getBBox();\n      left += textShapeBox.width + PADDING;\n\n      // 增加文本事件\n      textShape.on('click', () => {\n        const newHistoryCache = historyCache.slice(0, index + 1);\n        this.back(newHistoryCache);\n      });\n\n      // active 效果内置\n      textShape.on('mouseenter', () => {\n        textShape.attr(config.activeStyle);\n      });\n      textShape.on('mouseleave', () => {\n        textShape.attr(config.textStyle);\n      });\n\n      if (index < historyCache.length - 1) {\n        // 添加反斜杠\n        const dividerShape = this.breadCrumbGroup.addShape({\n          type: 'text',\n          name: `${config.name}_${record.name}_divider`,\n          attrs: {\n            text: config.dividerText,\n            ...config.textStyle,\n            x: left,\n            y: 0,\n          },\n        });\n\n        const dividerBox = dividerShape.getBBox();\n        left += dividerBox.width + PADDING;\n      }\n    });\n  }\n\n  /**\n   * 重置位置，初始化及触发 chart  afterchangesize 回调时使用\n   */\n  public resetPosition() {\n    // 当在第一层级未绘制面包屑，此时 changedata 触发 resetPosition 函数，需判断 this.breadCrumbGroup 是否存在\n    if (!this.breadCrumbGroup) return;\n    const view = this.context.view;\n    const coord = view.getCoordinate();\n    const point = coord.convert({ x: 0, y: 1 });\n    const breadCrumbGroup = this.breadCrumbGroup;\n    const bbox = breadCrumbGroup.getBBox();\n    const matrix = Util.transform(null, [['t', point.x + PADDING_LEFT, point.y + bbox.height + PADDING_TOP]]);\n    breadCrumbGroup.setMatrix(matrix);\n  }\n\n  /**\n   * 隐藏面包屑\n   */\n  private hideCrumbGroup() {\n    if (this.breadCrumbGroup) {\n      this.breadCrumbGroup.hide();\n    }\n  }\n\n  /**\n   * 点击事件, 下钻数据，并绘制面包屑\n   */\n  public click() {\n    const data = get(this.context, ['event', 'data', 'data']);\n    if (!data) return false;\n    this.drill(data);\n    this.drawBreadCrumb();\n  }\n\n  /**\n   * 回退事件，点击面包屑时触发\n   * @param historyCache 当前要回退到的历史\n   */\n  public back(historyCache) {\n    const { view } = this.context;\n    if (!isArray(this.historyCache) || this.historyCache.length <= 0) {\n      return;\n    }\n    this.historyCache = historyCache;\n    const data = historyCache[historyCache.length - 1].children;\n    view.changeData(data);\n    if (historyCache.length > 1) {\n      this.drawBreadCrumb();\n    } else {\n      this.hideCrumbGroup();\n    }\n  }\n\n  /**\n   * reset: 重置面包屑置初始状态，chart changeData 时使用\n   */\n  public reset() {\n    this.historyCache = null;\n    this.hideCrumbGroup();\n  }\n\n  /**\n   * destroy: 销毁资源\n   */\n  public destroy() {\n    if (this.breadCrumbGroup) {\n      this.breadCrumbGroup.remove();\n    }\n    super.destroy();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}