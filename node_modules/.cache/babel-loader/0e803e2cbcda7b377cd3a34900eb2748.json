{"ast":null,"code":"import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../util/createLoading';\nimport { ErrorBoundary } from '../base';\nimport useGraph from '../hooks/useGraph';\nimport { deepClone } from '../util/utils';\nimport { defaultNodeAnchorPoints, defaultStateStyles, defaultEdgeStyle } from './contants';\nimport { processMinimap, getGraphSize, getGraphId, bindEvents } from './utils';\nvar defaultNodeSize = [150, 30];\nvar defaultNodeStyle = {\n  stroke: '#72CC4A',\n  fill: '#f00'\n};\nvar defaultLayout = {\n  type: 'dagre',\n  rankdir: 'LR',\n  nodesep: 30,\n  ranksep: 50\n};\nvar defaultLabelCfg = {\n  style: {\n    fill: '#000000A6',\n    fontSize: 10\n  }\n};\nvar graphs = {};\n\nvar DagreFundFlowGraph = function (props) {\n  var data = props.data,\n      className = props.className,\n      style = props.style,\n      width = props.width,\n      height = props.height,\n      _a = props.nodeType,\n      nodeType = _a === void 0 ? 'round-rect' : _a,\n      _b = props.edgeType,\n      edgeType = _b === void 0 ? 'fund-polyline' : _b,\n      _c = props.behaviors,\n      behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c,\n      _d = props.nodeSize,\n      nodeSize = _d === void 0 ? defaultNodeSize : _d,\n      _e = props.nodeLabelCfg,\n      nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e,\n      _f = props.edgeLabelCfg,\n      edgeLabelCfg = _f === void 0 ? defaultLabelCfg : _f,\n      _g = props.nodeAnchorPoints,\n      nodeAnchorPoints = _g === void 0 ? defaultNodeAnchorPoints : _g,\n      _h = props.layout,\n      layout = _h === void 0 ? defaultLayout : _h,\n      minimapCfg = props.minimapCfg,\n      _j = props.nodeStyle,\n      nodeStyle = _j === void 0 ? defaultNodeStyle : _j,\n      _k = props.edgeStyle,\n      edgeStyle = _k === void 0 ? defaultEdgeStyle : _k,\n      _l = props.nodeStateStyles,\n      nodeStateStyles = _l === void 0 ? defaultStateStyles : _l,\n      _m = props.edgeStateStyles,\n      edgeStateStyles = _m === void 0 ? defaultStateStyles : _m,\n      _o = props.colorMap,\n      colorMap = _o === void 0 ? {} : _o,\n      graphRef = props.graphRef,\n      onReady = props.onReady,\n      loading = props.loading,\n      loadingTemplate = props.loadingTemplate,\n      errorTemplate = props.errorTemplate;\n  var container = React.useRef(null);\n  var graph = React.useRef(null);\n  var graphId = getGraphId(graph);\n  useGraph(graphs[graphId], props, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n    var graph = graphs[graphId];\n\n    if (!graph) {\n      graph = new G6.Graph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle,\n          colorMap: colorMap,\n          labelCfg: edgeLabelCfg\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout,\n        fitView: true\n      });\n      graphs[graphId] = graph;\n    }\n\n    if (graphRef) {\n      graphRef.current = graph;\n    }\n\n    processMinimap(minimapCfg, graph);\n    var originData = deepClone(data);\n    graph.data(originData);\n    graph.render();\n\n    if (onReady) {\n      onReady(graph);\n    } // modify the node color according to the in edge\n\n\n    var edges = graph.getEdges(); // @ts-ignore\n\n    edges.forEach(function (edge) {\n      var line = edge.getKeyShape();\n      var stroke = line.attr('stroke');\n      var targetNode = edge.getTarget();\n      targetNode.update({\n        style: {\n          stroke: stroke\n        }\n      });\n    });\n    graph.fitView();\n    bindEvents(graph, props);\n    return function () {\n      if (graphs[graphId]) {\n        graphs[graphId].destroy();\n        delete graphs[graphId];\n      }\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, {\n    errorTemplate: errorTemplate\n  }, loading && React.createElement(ChartLoading, {\n    loadingTemplate: loadingTemplate\n  }), React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default DagreFundFlowGraph;","map":{"version":3,"sources":["/Users/tim/Documents/RCM_instantOperating/node_modules/@ant-design/charts/es/graph/dagreFundFlow.js"],"names":["React","useEffect","G6","ChartLoading","ErrorBoundary","useGraph","deepClone","defaultNodeAnchorPoints","defaultStateStyles","defaultEdgeStyle","processMinimap","getGraphSize","getGraphId","bindEvents","defaultNodeSize","defaultNodeStyle","stroke","fill","defaultLayout","type","rankdir","nodesep","ranksep","defaultLabelCfg","style","fontSize","graphs","DagreFundFlowGraph","props","data","className","width","height","_a","nodeType","_b","edgeType","_c","behaviors","_d","nodeSize","_e","nodeLabelCfg","_f","edgeLabelCfg","_g","nodeAnchorPoints","_h","layout","minimapCfg","_j","nodeStyle","_k","edgeStyle","_l","nodeStateStyles","_m","edgeStateStyles","_o","colorMap","graphRef","onReady","loading","loadingTemplate","errorTemplate","container","useRef","graph","graphId","graphSize","Graph","current","modes","default","defaultNode","size","anchorPoints","labelCfg","defaultEdge","fitView","originData","render","edges","getEdges","forEach","edge","line","getKeyShape","attr","targetNode","getTarget","update","destroy","createElement","ref"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../util/createLoading';\nimport { ErrorBoundary } from '../base';\nimport useGraph from '../hooks/useGraph';\nimport { deepClone } from '../util/utils';\nimport { defaultNodeAnchorPoints, defaultStateStyles, defaultEdgeStyle } from './contants';\nimport { processMinimap, getGraphSize, getGraphId, bindEvents } from './utils';\nvar defaultNodeSize = [150, 30];\nvar defaultNodeStyle = {\n    stroke: '#72CC4A',\n    fill: '#f00',\n};\nvar defaultLayout = {\n    type: 'dagre',\n    rankdir: 'LR',\n    nodesep: 30,\n    ranksep: 50,\n};\nvar defaultLabelCfg = {\n    style: {\n        fill: '#000000A6',\n        fontSize: 10,\n    },\n};\nvar graphs = {};\nvar DagreFundFlowGraph = function (props) {\n    var data = props.data, className = props.className, style = props.style, width = props.width, height = props.height, _a = props.nodeType, nodeType = _a === void 0 ? 'round-rect' : _a, _b = props.edgeType, edgeType = _b === void 0 ? 'fund-polyline' : _b, _c = props.behaviors, behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c, _d = props.nodeSize, nodeSize = _d === void 0 ? defaultNodeSize : _d, _e = props.nodeLabelCfg, nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e, _f = props.edgeLabelCfg, edgeLabelCfg = _f === void 0 ? defaultLabelCfg : _f, _g = props.nodeAnchorPoints, nodeAnchorPoints = _g === void 0 ? defaultNodeAnchorPoints : _g, _h = props.layout, layout = _h === void 0 ? defaultLayout : _h, minimapCfg = props.minimapCfg, _j = props.nodeStyle, nodeStyle = _j === void 0 ? defaultNodeStyle : _j, _k = props.edgeStyle, edgeStyle = _k === void 0 ? defaultEdgeStyle : _k, _l = props.nodeStateStyles, nodeStateStyles = _l === void 0 ? defaultStateStyles : _l, _m = props.edgeStateStyles, edgeStateStyles = _m === void 0 ? defaultStateStyles : _m, _o = props.colorMap, colorMap = _o === void 0 ? {} : _o, graphRef = props.graphRef, onReady = props.onReady, loading = props.loading, loadingTemplate = props.loadingTemplate, errorTemplate = props.errorTemplate;\n    var container = React.useRef(null);\n    var graph = React.useRef(null);\n    var graphId = getGraphId(graph);\n    useGraph(graphs[graphId], props, container);\n    useEffect(function () {\n        var graphSize = getGraphSize(width, height, container);\n        var graph = graphs[graphId];\n        if (!graph) {\n            graph = new G6.Graph({\n                container: container.current,\n                width: graphSize[0],\n                height: graphSize[1],\n                modes: {\n                    default: behaviors,\n                },\n                defaultNode: {\n                    type: nodeType,\n                    size: nodeSize,\n                    style: nodeStyle,\n                    anchorPoints: nodeAnchorPoints,\n                    labelCfg: nodeLabelCfg,\n                },\n                defaultEdge: {\n                    type: edgeType,\n                    style: edgeStyle,\n                    colorMap: colorMap,\n                    labelCfg: edgeLabelCfg,\n                },\n                nodeStateStyles: nodeStateStyles,\n                edgeStateStyles: edgeStateStyles,\n                layout: layout,\n                fitView: true,\n            });\n            graphs[graphId] = graph;\n        }\n        if (graphRef) {\n            graphRef.current = graph;\n        }\n        processMinimap(minimapCfg, graph);\n        var originData = deepClone(data);\n        graph.data(originData);\n        graph.render();\n        if (onReady) {\n            onReady(graph);\n        }\n        // modify the node color according to the in edge\n        var edges = graph.getEdges();\n        // @ts-ignore\n        edges.forEach(function (edge) {\n            var line = edge.getKeyShape();\n            var stroke = line.attr('stroke');\n            var targetNode = edge.getTarget();\n            targetNode.update({\n                style: {\n                    stroke: stroke,\n                },\n            });\n        });\n        graph.fitView();\n        bindEvents(graph, props);\n        return function () {\n            if (graphs[graphId]) {\n                graphs[graphId].destroy();\n                delete graphs[graphId];\n            }\n        };\n    }, []);\n    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },\n        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate }),\n        React.createElement(\"div\", { className: className, style: style, ref: container })));\n};\nexport default DagreFundFlowGraph;\n"]},"metadata":{},"sourceType":"module"}