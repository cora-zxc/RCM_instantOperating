{"ast":null,"code":"var _jsxFileName = \"/Users/tim/Documents/RCM_instantOperating/src/MyPie.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './index.css';\nimport { useState, useEffect } from 'react';\nimport { Gauge } from '@ant-design/charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DemoGauge = () => {\n  _s();\n\n  var [percent, setPercent] = useState(0.2);\n  var [rangeColor, setRangeColor] = useState('#F4664A');\n  var color = ['#F4664A', '#FAAD14', '#30BF78'];\n  var ref;\n\n  var getColor = function getColor(percent) {\n    return percent < 0.4 ? color[0] : percent < 0.6 ? color[1] : color[2];\n  };\n\n  var config = {\n    percent,\n    range: {\n      color: rangeColor\n    },\n    indicator: {\n      pointer: {\n        style: {\n          stroke: '#D0D0D0'\n        }\n      },\n      pin: {\n        style: {\n          stroke: '#D0D0D0'\n        }\n      }\n    },\n    axis: {\n      label: {\n        formatter: function formatter(v) {\n          return Number(v) * 100;\n        }\n      },\n      subTickLine: {\n        count: 3\n      }\n    },\n    statistic: {\n      content: {\n        formatter: function formatter(_ref) {\n          var percent = _ref.percent;\n          return 'Rate: '.concat((percent * 100).toFixed(0), '%');\n        }\n      },\n      style: {\n        fontSize: 60\n      }\n    },\n    animation: false\n  };\n  useEffect(() => {\n    var data = percent;\n    var interval = setInterval(function () {\n      if (data >= 0.85) {\n        clearInterval(interval);\n      } else {\n        data += 0.095;\n        setPercent(data);\n        setRangeColor(getColor(data));\n      }\n    }, 500);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Gauge, { ...config,\n    chartRef: chartRef => ref = chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n};\n\n_s(DemoGauge, \"KcPETSJqQd5gnBX2SV8FWhjli1U=\");\n\n_c = DemoGauge;\n\nclass MyPie extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pie\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(DemoGauge, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default MyPie;\n\nvar _c;\n\n$RefreshReg$(_c, \"DemoGauge\");","map":{"version":3,"sources":["/Users/tim/Documents/RCM_instantOperating/src/MyPie.js"],"names":["React","useState","useEffect","Gauge","DemoGauge","percent","setPercent","rangeColor","setRangeColor","color","ref","getColor","config","range","indicator","pointer","style","stroke","pin","axis","label","formatter","v","Number","subTickLine","count","statistic","content","_ref","concat","toFixed","fontSize","animation","data","interval","setInterval","clearInterval","chartRef","MyPie","Component","render"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,oBAAtB;;;AAEA,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAC9B,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,GAAD,CAApC;AACA,MAAI,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,SAAD,CAA1C;AACA,MAAIQ,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAAZ;AACA,MAAIC,GAAJ;;AAEA,MAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBN,OAAlB,EAA2B;AACxC,WAAOA,OAAO,GAAG,GAAV,GAAgBI,KAAK,CAAC,CAAD,CAArB,GAA2BJ,OAAO,GAAG,GAAV,GAAgBI,KAAK,CAAC,CAAD,CAArB,GAA2BA,KAAK,CAAC,CAAD,CAAlE;AACD,GAFD;;AAGA,MAAIG,MAAM,GAAG;AACXP,IAAAA,OADW;AAEXQ,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAK,EAAEF;AAAT,KAFI;AAGXO,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV;AAAT,OADA;AAETC,MAAAA,GAAG,EAAE;AAAEF,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV;AAAT;AAFI,KAHA;AAOXE,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAC/B,iBAAOC,MAAM,CAACD,CAAD,CAAN,GAAY,GAAnB;AACD;AAHI,OADH;AAMJE,MAAAA,WAAW,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AANT,KAPK;AAeXC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE;AACPN,QAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBO,IAAnB,EAAyB;AAClC,cAAIvB,OAAO,GAAGuB,IAAI,CAACvB,OAAnB;AACA,iBAAO,SAASwB,MAAT,CAAgB,CAACxB,OAAO,GAAG,GAAX,EAAgByB,OAAhB,CAAwB,CAAxB,CAAhB,EAA4C,GAA5C,CAAP;AACD;AAJM,OADA;AAOTd,MAAAA,KAAK,EAAE;AAAEe,QAAAA,QAAQ,EAAE;AAAZ;AAPE,KAfA;AAwBXC,IAAAA,SAAS,EAAE;AAxBA,GAAb;AA0BA9B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI+B,IAAI,GAAG5B,OAAX;AACA,QAAI6B,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACrC,UAAIF,IAAI,IAAI,IAAZ,EAAkB;AAChBG,QAAAA,aAAa,CAACF,QAAD,CAAb;AACD,OAFD,MAEO;AACLD,QAAAA,IAAI,IAAI,KAAR;AACA3B,QAAAA,UAAU,CAAC2B,IAAD,CAAV;AACAzB,QAAAA,aAAa,CAACG,QAAQ,CAACsB,IAAD,CAAT,CAAb;AACD;AACF,KARyB,EAQvB,GARuB,CAA1B;AASD,GAXQ,EAWN,EAXM,CAAT;AAaA,sBAAO,QAAC,KAAD,OAAWrB,MAAX;AAAmB,IAAA,QAAQ,EAAGyB,QAAD,IAAe3B,GAAG,GAAG2B;AAAlD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjDH;;GAAMjC,S;;KAAAA,S;;AAmDN,MAAMkC,KAAN,SAAoBtC,KAAK,CAACuC,SAA1B,CAAoC;AAChCC,EAAAA,MAAM,GAAG;AACL,wBACA;AAAK,MAAA,EAAE,EAAC,KAAR;AAAA,8BACI;AAAA,+BAAK,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAOH;;AAT+B;;AAWpC,eAAeF,KAAf","sourcesContent":["import React from 'react';\nimport './index.css';\nimport { useState, useEffect } from 'react';\nimport { Gauge } from '@ant-design/charts';\n\nconst DemoGauge: React.FC = () => {\n    var [percent, setPercent] = useState(0.2);\n    var [rangeColor, setRangeColor] = useState('#F4664A');\n    var color = ['#F4664A', '#FAAD14', '#30BF78'];\n    var ref;\n  \n    var getColor = function getColor(percent) {\n      return percent < 0.4 ? color[0] : percent < 0.6 ? color[1] : color[2];\n    };\n    var config = {\n      percent,\n      range: { color: rangeColor },\n      indicator: {\n        pointer: { style: { stroke: '#D0D0D0' } },\n        pin: { style: { stroke: '#D0D0D0' } },\n      },\n      axis: {\n        label: {\n          formatter: function formatter(v) {\n            return Number(v) * 100;\n          },\n        },\n        subTickLine: { count: 3 },\n      },\n      statistic: {\n        content: {\n          formatter: function formatter(_ref) {\n            var percent = _ref.percent;\n            return 'Rate: '.concat((percent * 100).toFixed(0), '%');\n          },\n        },\n        style: { fontSize: 60 },\n      },\n      animation: false,\n    };\n    useEffect(() => {\n      var data = percent;\n      var interval = setInterval(function () {\n        if (data >= 0.85) {\n          clearInterval(interval);\n        } else {\n          data += 0.095;\n          setPercent(data);\n          setRangeColor(getColor(data));\n        }\n      }, 500);\n    }, []);\n  \n    return <Gauge {...config} chartRef={(chartRef) => (ref = chartRef)} />;\n  };\n\nclass MyPie extends React.Component {\n    render() {\n        return (\n        <div id=\"pie\">\n            <div><DemoGauge /></div>\n            <div>2</div>\n            <div>3</div>\n        </div>\n        );\n    }\n}\nexport default MyPie"]},"metadata":{},"sourceType":"module"}